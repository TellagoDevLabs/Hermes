<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EntityNotFound" xml:space="preserve">
    <value>Could not find an entity of type {0} with id ='{1}'.</value>
  </data>
  <data name="GroupCircleReference" xml:space="preserve">
    <value>Group Id '{0}' appears twice in a single group hierarchy.</value>
  </data>
  <data name="GroupContainsChildGroups" xml:space="preserve">
    <value>The group with id = '{0}' contains sub-groups. Delete all sub-groups before deleting. the group.</value>
  </data>
  <data name="GroupContainsChildTopics" xml:space="preserve">
    <value>The group with id = '{0}' contains topics. Delete all topics before deleting the group.</value>
  </data>
  <data name="GroupMustNotBeNull" xml:space="preserve">
    <value>Group property must not be null.</value>
  </data>
  <data name="GroupNameMustBeUnique" xml:space="preserve">
    <value>Already exists a topic group with name '{0}'.</value>
  </data>
  <data name="IdMustNotBeNull" xml:space="preserve">
    <value>Id property must not be null.</value>
  </data>
  <data name="TargetIdMustNotBeNull" xml:space="preserve">
    <value>TargetId property must not be null.</value>
  </data>
  <data name="MessageIdMustNotBeNull" xml:space="preserve">
    <value>MessageId property must not be null.</value>
  </data>
  <data name="NameMustBeNotNull" xml:space="preserve">
    <value>Name must not be null nor empty.</value>
  </data>
  <data name="TopicNameMustBeUnique" xml:space="preserve">
    <value>Already exists a topic with name '{0}'.</value>
  </data>
  <data name="TopicIdMustNotBeNull" xml:space="preserve">
    <value>TopicId property must not be null.</value>
  </data>
  <data name="ReceivedOnMustBeSetted" xml:space="preserve">
    <value>ReceivedOn property must be setted.</value>
  </data>
  <data name="CallbackKindUnknown" xml:space="preserve">
    <value>The callback's kind '{0}' is unknown.</value>
  </data>
  <data name="TargetKindUnknown" xml:space="preserve">
    <value>The target's kind '{0}' is unknown.</value>
  </data>
  <data name="InvalidFilter" xml:space="preserve">
    <value>The specified filter is invalid {0}.</value>
  </data>
  <data name="ErrorPushingCallback" xml:space="preserve">
    <value>An error ocurred trying to push callback to suscriber.
Message : {0}. 
Subscription : {1}</value>
  </data>
  <data name="ArgumentWasEmpty" xml:space="preserve">
    <value>Argument was empty.</value>
  </data>
  <data name="ArgumentWasEmptyOrWhitespace" xml:space="preserve">
    <value>Argument was empty or whitespace.</value>
  </data>
  <data name="ArgumentWasInvalid" xml:space="preserve">
    <value>Argument was invalid.</value>
  </data>
  <data name="ArgumentWasNull" xml:space="preserve">
    <value>Argument was null.</value>
  </data>
</root>